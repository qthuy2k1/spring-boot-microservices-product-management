server:
  port: 9094

spring:
  application:
    name: order-service
  datasource:
    username: "postgres"
    password: "root"
    url: jdbc:postgresql://localhost:5435/orders_db
  jpa:
    properties:
      hibernate:
        format_sql: "true"
    hibernate:
      ddl-auto: update
  kafka:
    bootstrap-servers:
      - localhost:29092
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        "[spring.json.type.mapping]": order:com.qthuy2k1.orderservice.event.OrderPlaced
  graphql:
    path: /orders/graphql
    graphiql:
      enabled: true
      path: /orders/graphiql
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:7070/realms/my-realm


## Eureka
eureka:
  client:
    enabled: true
    serviceUrl:
      defaultZone: http://eureka:password@localhost:8761/eureka
  instance:
    hostname: localhost
    prefer-ip-address: true

management:
  tracing:
    sampling:
      probability: 1.0
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enable: true
    ratelimiters:
      enable: true

# Resilience4j Properties
resilience4j:
  circuitbreaker:
    instances:
      createOrder:
        slidingWindowSize: 10
        permittedNumberOfCallsInHalfOpenState: 5
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
        registerHealthIndicator: true
  retry:
    instances:
      createOrder:
        maxRetryAttempts: 5
        waitDuration: 5s

keycloak:
  host: localhost
  port: 7070